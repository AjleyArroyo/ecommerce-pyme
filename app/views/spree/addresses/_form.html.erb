<% address_id = address_type.chars.first %>
<% if address_id == 's' %>
  <% SpreeFrontend::Spree::AddressDecorator::ADDRESS_FIELDS.each do |field| %>
    <% if field == "country" %>
      <p class="form-group checkout-content-inner-field" id="<%= "#{address_id}country" %>" style='display:none'>
        <span id="<%= "#{address_id}country-selection" %>" class="d-block position-relative">
          <%= address_form.collection_select :country_id, available_countries, :id, :name,
                                            { prompt: Spree.t(:country).upcase },
                                            { class: 'required form-control spree-flat-select'} %>
          <%= image_tag 'arrow.svg', class: 'position-absolute spree-flat-select-arrow' %>
        </span>
      </p>
    <% elsif field == "state" %>
      <div class="form-group mb-4">
        <%= address_field(address_form, :state, address_id) { address_state(address_form, address.country, address_id) } if Spree::Config[:address_requires_state] %>
      </div>
    <% elsif field == "latitude" %>
        <div class="form-group mb-4">
          <%= address_form.hidden_field :latitude, class: "spree-flat-input"%>
        </div>
    <% elsif field == "longitude"%>
      <div class="form-group mb-4">
        <%= address_form.hidden_field :longitude, class: "spree-flat-input"%>
      </div>
    <% else %>
      <% next if field == "company" && !Spree::Config[:company] %>
      <% next if field == "alternative_#{address_id}_phone" && !Spree::Config["alternative_#{address_id}_phone"] %>
      <div class="form-group mb-4">
        <%= address_field(address_form, field.to_sym, address_id) %>
      </div>
    <% end %>
  <% end %>
  <div id="map2" class="mb-4" style='width: 100%; height: 400px;'></div>
<% else %>
  <% [ 'nit' , 'social_reason' ].each do |field| %>
      <div class="form-group mb-4">
        <%= address_field(address_form, field.to_sym, address_id) %>
      </div>
  <% end %>
      <div class="form-group mb-4" style='display: none'>
        <%= address_field(address_form, 'skip_validation'.to_sym, address_id) %>
      </div>
      <script>
        document.getElementById('order_bill_address_attributes_skip_validation').val('true')
      </script>
<% end %>

  <script async='' defer='defer' src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDJReGXJ_7NMeAm9eAZWCOjl4RznrP-eCc&amp;callback=initMap'></script>

  <script>
    var map, infoWindow;
    markers = [];
      function initMap() {
        // Styles a map in night mode.
        map = new google.maps.Map(document.getElementById('map2'), {
            center: {lat: -17.775381, lng: -63.183377},
            zoom: 13,
            styles: [
                {
                    "featureType": "all",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "saturation": 36
                        },
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 40
                        }
                    ]
                },
                {
                    "featureType": "all",
                    "elementType": "labels.text.stroke",
                    "stylers": [
                        {
                            "visibility": "on"
                        },
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 16
                        }
                    ]
                },
                {
                    "featureType": "all",
                    "elementType": "labels.icon",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "administrative",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 20
                        }
                    ]
                },
                {
                    "featureType": "administrative",
                    "elementType": "geometry.stroke",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 17
                        },
                        {
                            "weight": 1.2
                        }
                    ]
                },
                {
                    "featureType": "landscape",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 20
                        }
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 21
                        }
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 17
                        }
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "geometry.stroke",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 29
                        },
                        {
                            "weight": 0.2
                        }
                    ]
                },
                {
                    "featureType": "road.arterial",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 18
                        }
                    ]
                },
                {
                    "featureType": "road.local",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 16
                        }
                    ]
                },
                {
                    "featureType": "transit",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 19
                        }
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        },
                        {
                            "lightness": 17
                        }
                    ]
                }
            ]

        });
        load_markers();

        function load_markers() {
            var latitude = $('#address_latitude').val();
            var longitude = $('#address_longitude').val();
            if (latitude != "" && longitude != "") {
                var location = {lat: parseFloat(latitude), lng: parseFloat(longitude)};
                addMarker(location, false);
                map.setCenter(location);
            } else {
                infoWindow = new google.maps.InfoWindow;
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        infoWindow.setPosition(pos);
                        // infoWindow.setContent('Ubicaci√≥n.');

                        addMarker(pos, true);
                        infoWindow.open(map);
                        map.setCenter(pos);
                    }, function () {
                        handleLocationError(true, infoWindow, map.getCenter());
                    });
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            }
        }

        map.addListener('click', function (event) {
            addMarker(event.latLng, true);
        });

        function addMarker(location, setInputLocation) {
            // Add the marker at the clicked location, and add the next-available label
            // from the array of alphabetical characters.
            var marker = new google.maps.Marker({
                draggable: true,
                position: location,
                label: '',
                map: map
            });
            marker.addListener('click', function () {
                if (this.getAnimation() !== null) {
                    this.setAnimation(null);
                } else {
                    this.setAnimation(google.maps.Animation.BOUNCE);
                }
            });
            clearMarkers();
            markers.push(marker);
            if (setInputLocation)
                addLocationInput();
        }

        function clearMarkers() {
            setMapOnAll(null);
        }

        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        function addLocationInput() {
            $('#address_latitude').val(markers[0].position.lat());
            $('#address_longitude').val(markers[0].position.lng());
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'No hemos podido detectar tu ubicaci√≥n.' :
                'Tu navegador no soporta la detecci√≥n de tu ubicaci√≥n.');
            infoWindow.open(map);
        }

      }

  </script>
